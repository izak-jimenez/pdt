/* Copyright (C) Josué Isaac Jiménez Ortiz - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Josué Isaac Jiménez Ortiz <izakjimenez@gmail.com>, September 2015
 */
package pdt_testing;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.Scanner;
import java.util.TimerTask;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultCaret;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.io.FileUtils;
import org.apache.commons.net.ftp.FTPFile;
import org.xml.sax.SAXException;

/**
 *
 * @author Josué Isaac Jiménez Ortiz
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
        setLocationRelativeTo(null);
        loadingIcon.setVisible(false);
        logScreen.setText("Inicializando componentes...");
        logScreen.append("\nOK!");
        final JFrame thisFrame = this;
        thisFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                thisFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
                int confirmed = JOptionPane.showConfirmDialog(null, "¿Estas seguro que deseas salir de la aplicación?", "Salir?", JOptionPane.YES_NO_OPTION);
                if (confirmed == JOptionPane.YES_OPTION) {
                    dispose();
                    System.exit(0);
                } else if (confirmed == JOptionPane.NO_OPTION) {

                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuConfig = new javax.swing.JDialog();
        panelMenuConfig = new javax.swing.JTabbedPane();
        subMenuConfigFTP = new javax.swing.JPanel();
        ftpConfigTitle = new javax.swing.JLabel();
        ftpSubMenuSeparator = new javax.swing.JSeparator();
        ftpSubMenuServerLabel = new javax.swing.JLabel();
        ftpSubMenuServerInput = new javax.swing.JTextField();
        ftpSubMenuUserLabel = new javax.swing.JLabel();
        ftpSubMenuUserInput = new javax.swing.JTextField();
        ftpSubMenuPassLabel = new javax.swing.JLabel();
        ftpSubMenuPortLabel = new javax.swing.JLabel();
        ftpSubMenuPortInput = new javax.swing.JTextField();
        ftpSubMenuPasswordInput = new javax.swing.JPasswordField();
        ftpSubMenuSaveBtn = new javax.swing.JButton();
        ftpSubMenuCancelBtn = new javax.swing.JButton();
        nomCarpetaStockLabel = new javax.swing.JLabel();
        nomCarpetaStock = new javax.swing.JTextField();
        nomCarpetaOrdersLabel = new javax.swing.JLabel();
        nomCarpetaOrdenes = new javax.swing.JTextField();
        nomCarpetaMasdaLabel = new javax.swing.JLabel();
        nomCarpetaMasda = new javax.swing.JTextField();
        nomCarpetaEnviosLabel = new javax.swing.JLabel();
        nomCarpetaEnvios = new javax.swing.JTextField();
        subMenuConfigDB = new javax.swing.JPanel();
        dbConfigTitle = new javax.swing.JLabel();
        dbSubMenuSeparator = new javax.swing.JSeparator();
        dbSubMenuServerLabel = new javax.swing.JLabel();
        dbSubMenuServerInput = new javax.swing.JTextField();
        dbSubMenuUserLabel = new javax.swing.JLabel();
        dbSubMenuUsernameInput = new javax.swing.JTextField();
        dbSubMenuPasswordLabel = new javax.swing.JLabel();
        dbSubMenuPasswordInput = new javax.swing.JPasswordField();
        dbSubMenuDatabaseLabel = new javax.swing.JLabel();
        dbSubMenuDatabaseInput = new javax.swing.JTextField();
        dbSubMenuSaveBtn = new javax.swing.JButton();
        dbSubMenuCancelBtn = new javax.swing.JButton();
        subMenuConfigApp = new javax.swing.JPanel();
        appConfigTitle = new javax.swing.JLabel();
        appConfigSeparator = new javax.swing.JSeparator();
        appConfigTimerStockDiarioLabel = new javax.swing.JLabel();
        stockHR1Label = new javax.swing.JLabel();
        stockIntervalLabel = new javax.swing.JLabel();
        stockSpinnerHR1 = new javax.swing.JSpinner();
        stockSpinnerStockInterval = new javax.swing.JSpinner();
        appConfigTimerOrdenesLabel = new javax.swing.JLabel();
        ordenesFreqSpinner = new javax.swing.JSpinner();
        appConfigTimerEnviosLabel = new javax.swing.JLabel();
        enviosFreqSpinner = new javax.swing.JSpinner();
        appConfigBtnGuardar = new javax.swing.JButton();
        appConfigBtnCancelar = new javax.swing.JButton();
        masdaTimerConfigLabel = new javax.swing.JLabel();
        masdaSpinner = new javax.swing.JSpinner();
        bgPanel = new javax.swing.JPanel();
        btnSettings = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logScreen = new javax.swing.JTextArea();
        btnStocks = new javax.swing.JToggleButton();
        btnOrders = new javax.swing.JToggleButton();
        btnShipping = new javax.swing.JToggleButton();
        pbStock = new javax.swing.JProgressBar();
        loadingIcon = new javax.swing.JLabel();
        stockLoadingIcon = new javax.swing.JLabel();
        orderLoadingIcon = new javax.swing.JLabel();
        shippingLoadingIcon = new javax.swing.JLabel();
        pbOrder = new javax.swing.JProgressBar();
        pbShipping = new javax.swing.JProgressBar();
        btnMasda = new javax.swing.JToggleButton();
        masdaLoadingIcon = new javax.swing.JLabel();
        pbMasda = new javax.swing.JProgressBar();
        stockTestBtn = new javax.swing.JButton();
        orderTestButton = new javax.swing.JButton();
        shippingTestBtn = new javax.swing.JButton();
        masdaTestBtn = new javax.swing.JButton();

        menuConfig.setIconImage(null);
        menuConfig.setResizable(false);

        panelMenuConfig.setBackground(new java.awt.Color(255, 255, 255));

        subMenuConfigFTP.setBackground(new java.awt.Color(255, 255, 255));

        ftpConfigTitle.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        ftpConfigTitle.setText("Configuración FTP");

        ftpSubMenuServerLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        ftpSubMenuServerLabel.setText("Servidor:");

        ftpSubMenuServerInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        ftpSubMenuUserLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        ftpSubMenuUserLabel.setText("Usuario:");

        ftpSubMenuUserInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        ftpSubMenuPassLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        ftpSubMenuPassLabel.setText("Contraseña:");

        ftpSubMenuPortLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        ftpSubMenuPortLabel.setText("Puerto:");

        ftpSubMenuPortInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        ftpSubMenuPasswordInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        ftpSubMenuSaveBtn.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        ftpSubMenuSaveBtn.setText("Guardar");
        ftpSubMenuSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftpSubMenuSaveBtnActionPerformed(evt);
            }
        });

        ftpSubMenuCancelBtn.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        ftpSubMenuCancelBtn.setText("Cancelar");
        ftpSubMenuCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftpSubMenuCancelBtnActionPerformed(evt);
            }
        });

        nomCarpetaStockLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        nomCarpetaStockLabel.setText("Nombre carpeta (Stock)");

        nomCarpetaOrdersLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        nomCarpetaOrdersLabel.setText("Nombre carpeta (Órdenes)");

        nomCarpetaMasdaLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        nomCarpetaMasdaLabel.setText("Nombre carpeta (MASDA)");

        nomCarpetaEnviosLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        nomCarpetaEnviosLabel.setText("Nombre carpeta (Envíos)");

        nomCarpetaEnvios.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N

        javax.swing.GroupLayout subMenuConfigFTPLayout = new javax.swing.GroupLayout(subMenuConfigFTP);
        subMenuConfigFTP.setLayout(subMenuConfigFTPLayout);
        subMenuConfigFTPLayout.setHorizontalGroup(
            subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuConfigFTPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ftpSubMenuSeparator)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subMenuConfigFTPLayout.createSequentialGroup()
                        .addGap(0, 268, Short.MAX_VALUE)
                        .addComponent(ftpSubMenuCancelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(ftpSubMenuSaveBtn))
                    .addGroup(subMenuConfigFTPLayout.createSequentialGroup()
                        .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ftpConfigTitle)
                                .addComponent(ftpSubMenuServerLabel)
                                .addComponent(ftpSubMenuServerInput)
                                .addComponent(ftpSubMenuUserLabel)
                                .addComponent(ftpSubMenuUserInput, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                .addComponent(ftpSubMenuPassLabel)
                                .addComponent(ftpSubMenuPortLabel)
                                .addComponent(ftpSubMenuPortInput)
                                .addComponent(ftpSubMenuPasswordInput))
                            .addGroup(subMenuConfigFTPLayout.createSequentialGroup()
                                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomCarpetaStockLabel)
                                    .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(nomCarpetaOrdenes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                        .addComponent(nomCarpetaStock, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(nomCarpetaOrdersLabel))
                                .addGap(39, 39, 39)
                                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nomCarpetaEnviosLabel)
                                    .addComponent(nomCarpetaMasdaLabel)
                                    .addComponent(nomCarpetaMasda)
                                    .addComponent(nomCarpetaEnvios))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        subMenuConfigFTPLayout.setVerticalGroup(
            subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuConfigFTPLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(ftpConfigTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ftpSubMenuSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(ftpSubMenuServerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftpSubMenuServerInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ftpSubMenuUserLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftpSubMenuUserInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ftpSubMenuPassLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftpSubMenuPasswordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ftpSubMenuPortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftpSubMenuPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomCarpetaStockLabel)
                    .addComponent(nomCarpetaMasdaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomCarpetaStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomCarpetaMasda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomCarpetaOrdersLabel)
                    .addComponent(nomCarpetaEnviosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomCarpetaOrdenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomCarpetaEnvios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(subMenuConfigFTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ftpSubMenuSaveBtn)
                    .addComponent(ftpSubMenuCancelBtn))
                .addContainerGap())
        );

        panelMenuConfig.addTab("FTP", subMenuConfigFTP);

        subMenuConfigDB.setBackground(new java.awt.Color(255, 255, 255));

        dbConfigTitle.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        dbConfigTitle.setText("Configuración Base de Datos");

        dbSubMenuServerLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        dbSubMenuServerLabel.setText("Servidor:");

        dbSubMenuServerInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        dbSubMenuUserLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        dbSubMenuUserLabel.setText("Usuario:");

        dbSubMenuUsernameInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        dbSubMenuPasswordLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        dbSubMenuPasswordLabel.setText("Contraseña:");

        dbSubMenuPasswordInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        dbSubMenuDatabaseLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        dbSubMenuDatabaseLabel.setText("Base de Datos:");

        dbSubMenuDatabaseInput.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        dbSubMenuSaveBtn.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        dbSubMenuSaveBtn.setText("Guardar");
        dbSubMenuSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbSubMenuSaveBtnActionPerformed(evt);
            }
        });

        dbSubMenuCancelBtn.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        dbSubMenuCancelBtn.setText("Cancelar");
        dbSubMenuCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbSubMenuCancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subMenuConfigDBLayout = new javax.swing.GroupLayout(subMenuConfigDB);
        subMenuConfigDB.setLayout(subMenuConfigDBLayout);
        subMenuConfigDBLayout.setHorizontalGroup(
            subMenuConfigDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuConfigDBLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subMenuConfigDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dbSubMenuSeparator)
                    .addGroup(subMenuConfigDBLayout.createSequentialGroup()
                        .addGroup(subMenuConfigDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dbConfigTitle)
                            .addComponent(dbSubMenuServerLabel)
                            .addComponent(dbSubMenuServerInput)
                            .addComponent(dbSubMenuUserLabel)
                            .addComponent(dbSubMenuUsernameInput)
                            .addComponent(dbSubMenuPasswordLabel)
                            .addComponent(dbSubMenuPasswordInput)
                            .addComponent(dbSubMenuDatabaseLabel)
                            .addComponent(dbSubMenuDatabaseInput, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                        .addGap(0, 168, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subMenuConfigDBLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dbSubMenuCancelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(dbSubMenuSaveBtn)))
                .addContainerGap())
        );
        subMenuConfigDBLayout.setVerticalGroup(
            subMenuConfigDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuConfigDBLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(dbConfigTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbSubMenuSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbSubMenuServerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbSubMenuServerInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(dbSubMenuUserLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbSubMenuUsernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dbSubMenuPasswordLabel)
                .addGap(18, 18, 18)
                .addComponent(dbSubMenuPasswordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dbSubMenuDatabaseLabel)
                .addGap(18, 18, 18)
                .addComponent(dbSubMenuDatabaseInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addGroup(subMenuConfigDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbSubMenuSaveBtn)
                    .addComponent(dbSubMenuCancelBtn))
                .addContainerGap())
        );

        panelMenuConfig.addTab("Base de Datos", subMenuConfigDB);

        subMenuConfigApp.setBackground(new java.awt.Color(255, 255, 255));
        subMenuConfigApp.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N

        appConfigTitle.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        appConfigTitle.setText("Configuración de la Aplicación");

        appConfigTimerStockDiarioLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        appConfigTimerStockDiarioLabel.setText("Stock Diario Intervalo:");

        stockHR1Label.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        stockHR1Label.setText("Hora de Inicio");

        stockIntervalLabel.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        stockIntervalLabel.setText("Intervalo");

        stockSpinnerHR1.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        stockSpinnerHR1.setModel(new javax.swing.SpinnerListModel(new String[] {"12 AM", "1 AM", "2 AM", "3 AM", "4 AM", "5 AM", "6 AM", "7 AM", "8 AM", "9 AM", "10 AM", "11 AM", "12 PM", "1 PM", "2 PM", "3 PM", "4 PM", "5 PM", "6 PM", "7 PM", "8 PM", "9 PM", "10 PM", "11 PM"}));

        stockSpinnerStockInterval.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        stockSpinnerStockInterval.setModel(new javax.swing.SpinnerListModel(new String[] {"12 hrs", "24 hrs"}));

        appConfigTimerOrdenesLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        appConfigTimerOrdenesLabel.setText("Frecuencia de Verificación de Órdenes:");

        ordenesFreqSpinner.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        ordenesFreqSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"1 min.", "5 min.", "10 min.", "15 min.", "20 min.", "25 min.", "30 min.", "35 min.", "40 min.", "45 min.", "50 min.", "55 min.", "60 min."}));

        appConfigTimerEnviosLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        appConfigTimerEnviosLabel.setText("Frecuencia de Verificación de Envíos:");

        enviosFreqSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"1 min.", "5 min.", "10 min.", "15 min.", "20 min.", "25 min.", "30 min.", "35 min.", "40 min.", "45 min.", "50 min.", "55 min.", "60 min."}));

        appConfigBtnGuardar.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        appConfigBtnGuardar.setText("Guardar");
        appConfigBtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appConfigBtnGuardarActionPerformed(evt);
            }
        });

        appConfigBtnCancelar.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        appConfigBtnCancelar.setText("Cancelar");
        appConfigBtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appConfigBtnCancelarActionPerformed(evt);
            }
        });

        masdaTimerConfigLabel.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        masdaTimerConfigLabel.setText("Frecuencia de Verificación de Productos Nuevos (MASDA):");

        masdaSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"12 AM", "1 AM", "2 AM", "3 AM", "4 AM", "5 AM", "6 AM", "7 AM", "8 AM", "9 AM", "10 AM", "11 AM", "12 PM", "1 PM", "2 PM", "3 PM", "4 PM", "5 PM", "6 PM", "7 PM", "8 PM", "9 PM", "10 PM", "11 PM"}));

        javax.swing.GroupLayout subMenuConfigAppLayout = new javax.swing.GroupLayout(subMenuConfigApp);
        subMenuConfigApp.setLayout(subMenuConfigAppLayout);
        subMenuConfigAppLayout.setHorizontalGroup(
            subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuConfigAppLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(appConfigSeparator)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subMenuConfigAppLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(appConfigBtnCancelar)
                        .addGap(18, 18, 18)
                        .addComponent(appConfigBtnGuardar))
                    .addGroup(subMenuConfigAppLayout.createSequentialGroup()
                        .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(appConfigTitle)
                            .addComponent(appConfigTimerStockDiarioLabel)
                            .addComponent(appConfigTimerOrdenesLabel)
                            .addComponent(ordenesFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appConfigTimerEnviosLabel)
                            .addComponent(enviosFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(masdaTimerConfigLabel)
                            .addComponent(masdaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(subMenuConfigAppLayout.createSequentialGroup()
                                .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stockSpinnerHR1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stockHR1Label))
                                .addGap(49, 49, 49)
                                .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stockIntervalLabel)
                                    .addComponent(stockSpinnerStockInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 124, Short.MAX_VALUE)))
                .addContainerGap())
        );
        subMenuConfigAppLayout.setVerticalGroup(
            subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuConfigAppLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(appConfigTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appConfigSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appConfigTimerStockDiarioLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockHR1Label)
                    .addComponent(stockIntervalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stockSpinnerHR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockSpinnerStockInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(appConfigTimerOrdenesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ordenesFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(appConfigTimerEnviosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enviosFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(masdaTimerConfigLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(masdaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(subMenuConfigAppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appConfigBtnGuardar)
                    .addComponent(appConfigBtnCancelar))
                .addContainerGap())
        );

        panelMenuConfig.addTab("Configuración", subMenuConfigApp);
        subMenuConfigApp.setVisible(false);

        javax.swing.GroupLayout menuConfigLayout = new javax.swing.GroupLayout(menuConfig.getContentPane());
        menuConfig.getContentPane().setLayout(menuConfigLayout);
        menuConfigLayout.setHorizontalGroup(
            menuConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMenuConfig, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
        );
        menuConfigLayout.setVerticalGroup(
            menuConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMenuConfig)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        bgPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnSettings.setBackground(new java.awt.Color(255, 255, 255));
        btnSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/settings_icon.png"))); // NOI18N
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        logScreen.setEditable(false);
        logScreen.setColumns(20);
        logScreen.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        logScreen.setRows(5);
        logScreen.setWrapStyleWord(true);
        jScrollPane1.setViewportView(logScreen);

        btnStocks.setBackground(new java.awt.Color(255, 255, 255));
        btnStocks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/stock_icon_off.png"))); // NOI18N
        btnStocks.setToolTipText("Inventario");
        btnStocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStocksActionPerformed(evt);
            }
        });

        btnOrders.setBackground(new java.awt.Color(255, 255, 255));
        btnOrders.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/order_icon_off.png"))); // NOI18N
        btnOrders.setToolTipText("Órdenes");
        btnOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdersActionPerformed(evt);
            }
        });

        btnShipping.setBackground(new java.awt.Color(255, 255, 255));
        btnShipping.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/shipping_icon_off.png"))); // NOI18N
        btnShipping.setToolTipText("Envíos");
        btnShipping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShippingActionPerformed(evt);
            }
        });

        pbStock.setBackground(new java.awt.Color(255, 255, 255));
        pbStock.setBorderPainted(false);

        loadingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/loading.gif"))); // NOI18N

        stockLoadingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stock_icon_small.png"))); // NOI18N

        orderLoadingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/order_icon_small.png"))); // NOI18N

        shippingLoadingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/shipping_icon_small.png"))); // NOI18N

        btnMasda.setBackground(new java.awt.Color(255, 255, 255));
        btnMasda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/masda_icon_off.png"))); // NOI18N
        btnMasda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMasdaActionPerformed(evt);
            }
        });

        masdaLoadingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/masda_icon_small.png"))); // NOI18N

        stockTestBtn.setBackground(new java.awt.Color(255, 255, 255));
        stockTestBtn.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        stockTestBtn.setText("Test");
        stockTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockTestBtnActionPerformed(evt);
            }
        });

        orderTestButton.setBackground(new java.awt.Color(255, 255, 255));
        orderTestButton.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        orderTestButton.setText("Test");
        orderTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderTestButtonActionPerformed(evt);
            }
        });

        shippingTestBtn.setBackground(new java.awt.Color(255, 255, 255));
        shippingTestBtn.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        shippingTestBtn.setText("Test");
        shippingTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shippingTestBtnActionPerformed(evt);
            }
        });

        masdaTestBtn.setBackground(new java.awt.Color(255, 255, 255));
        masdaTestBtn.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        masdaTestBtn.setText("Test");
        masdaTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masdaTestBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgPanelLayout = new javax.swing.GroupLayout(bgPanel);
        bgPanel.setLayout(bgPanelLayout);
        bgPanelLayout.setHorizontalGroup(
            bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addComponent(orderLoadingIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(orderTestButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addComponent(stockLoadingIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pbStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stockTestBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addComponent(shippingLoadingIcon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pbShipping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(shippingTestBtn))
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addComponent(masdaLoadingIcon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pbMasda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(masdaTestBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 297, Short.MAX_VALUE)
                        .addComponent(loadingIcon)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgPanelLayout.createSequentialGroup()
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnShipping)
                                    .addComponent(btnMasda)
                                    .addComponent(btnStocks)))
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 104, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(btnSettings)
                        .addGap(14, 14, 14))))
        );
        bgPanelLayout.setVerticalGroup(
            bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(bgPanelLayout.createSequentialGroup()
                                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnSettings)
                                            .addComponent(btnStocks, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(btnOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnShipping, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnMasda)))
                                .addGap(18, 18, 18)
                                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(stockLoadingIcon)
                                    .addComponent(pbStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(stockTestBtn))
                        .addGap(18, 18, 18)
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderLoadingIcon)
                            .addComponent(orderTestButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(pbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadingIcon)
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(shippingLoadingIcon)
                            .addComponent(pbShipping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shippingTestBtn))
                        .addGap(18, 18, 18)
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(masdaLoadingIcon)
                            .addComponent(pbMasda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(masdaTestBtn))))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
        // Solo se abre la configuración si no se está ejecutando ningún proceso
        if (!btnMasda.isSelected() && !btnOrders.isSelected() && !btnShipping.isSelected() && !btnStocks.isSelected()) {
            // New internal jdialog test
            menuConfig.pack();
            setLocationRelativeTo(null);
            menuConfig.setTitle("Configuración");
            menuConfig.setVisible(true);

            // Si no existe el directorio PDT ni los archivos de configuración, entonces los crea.
            if (!(new File("C:\\PDT").exists())) {
                new File("C:\\PDT").mkdir();
                try {
                    ClassLoader classloader = Thread.currentThread().getContextClassLoader();
                    // Utiliza los archivos de configuración predeterminados que se encuentran dentro de la carpeta de recursos.
                    InputStream iStreamFTP = classloader.getResourceAsStream("files/pdt_ftp_settings.properties"); // archivo de config ftp
                    InputStream iStreamDB = classloader.getResourceAsStream("files/pdt_db_settings.properties"); // archivo de config db
                    OutputStream outputStreamFTP = new FileOutputStream(new File("C:\\PDT\\pdt_ftp_settings.properties")); // stream de escritura para archivo config ftp
                    OutputStream outputStreamDB = new FileOutputStream(new File("C:\\PDT\\pdt_db_settings.properties")); // stream de escritura para archivo config db
                    int read = 0;
                    byte[] bytes = new byte[1024];

                    while (((read = iStreamFTP.read(bytes)) != -1) && ((read = iStreamDB.read(bytes)) != -1)) {
                        outputStreamFTP.write(bytes, 0, read);
                        outputStreamDB.write(bytes, 0, read);
                    }

                    iStreamFTP.close();
                    iStreamDB.close();
                    outputStreamFTP.close();
                    outputStreamDB.close();

                } catch (Exception ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } // Si el directorio existe pero los archivos de configuración no, entonces los crea sin valores.
            else if ((!(new File("C:\\PDT\\pdt_ftp_settings.properties").exists())) && (!(new File("C:\\PDT\\pdt_db_settings.properties").exists())) && (!(new File("C:\\PDT\\pdt_app_settings.properties").exists()))) {
                try {
                    ClassLoader classloader = Thread.currentThread().getContextClassLoader();
                    // Utiliza los archivos de configuración predeterminados que se encuentran dentro de la carpeta de recursos.
                    InputStream iStreamFTP = classloader.getResourceAsStream("files/pdt_ftp_settings.properties"); // archivo de config ftp
                    InputStream iStreamDB = classloader.getResourceAsStream("files/pdt_db_settings.properties"); // archivo de config db
                    InputStream iStreamApp = classloader.getResourceAsStream("files/pdt_app_settings.properties"); // archivo de configuración de la aplicación
                    OutputStream outputStreamFTP = new FileOutputStream(new File("C:\\PDT\\pdt_ftp_settings.properties")); // stream de escritura para archivo config ftp
                    OutputStream outputStreamDB = new FileOutputStream(new File("C:\\PDT\\pdt_db_settings.properties")); // stream de escritura para archivo config db
                    OutputStream outputStreamApp = new FileOutputStream(new File("C:\\PDT\\pdt_app_settings.properties")); // stream de escritura para archivo config de la aplicación
                    int read = 0;
                    byte[] bytes = new byte[1024];

                    while (((read = iStreamFTP.read(bytes)) != -1) && ((read = iStreamDB.read(bytes)) != -1) && ((read = iStreamApp.read(bytes)) != -1)) {
                        outputStreamFTP.write(bytes, 0, read);
                        outputStreamDB.write(bytes, 0, read);
                        outputStreamApp.write(bytes, 0, read);
                    }

                    iStreamFTP.close();
                    iStreamDB.close();
                    iStreamApp.close();
                    outputStreamApp.close();
                    outputStreamFTP.close();
                    outputStreamDB.close();

                    // Escritura de parámetros vacíos de configuración para el servidor FTP
                    File pdtFTPSettingsFile = new File("C:\\PDT\\pdt_ftp_settings.properties");
                    FileReader FTPFileReader = new FileReader(pdtFTPSettingsFile);
                    pdtFTPSettings.load(FTPFileReader);
                    ftpSubMenuServerInput.setText(pdtFTPSettings.getProperty("server", "localhost"));
                    ftpSubMenuUserInput.setText(pdtFTPSettings.getProperty("user", ""));
                    ftpSubMenuPasswordInput.setText(pdtFTPSettings.getProperty("password", ""));
                    ftpSubMenuPortInput.setText(pdtFTPSettings.getProperty("port", "21"));
                    nomCarpetaMasda.setText(pdtFTPSettings.getProperty("masda_folder", "Articulos_MASDA"));
                    nomCarpetaStock.setText(pdtFTPSettings.getProperty("stock_folder", "Stock_STOCK"));
                    nomCarpetaOrdenes.setText(pdtFTPSettings.getProperty("orders_folder", "Salidas_OBDLV"));
                    nomCarpetaEnvios.setText(pdtFTPSettings.getProperty("shipping_folder", "ConfirmacionSalidas_OBDLV_CONF"));

                    // Escritura de parámetros vacíos de configuración para la base de datos
                    File pdtDBSettingsFile = new File("C:\\PDT\\pdt_db_settings.properties");
                    FileReader DBFileReader = new FileReader(pdtDBSettingsFile);
                    pdtDBSettings.load(DBFileReader);
                    dbSubMenuServerInput.setText(pdtDBSettings.getProperty("server", "localhost"));
                    dbSubMenuUsernameInput.setText(pdtDBSettings.getProperty("user", ""));
                    dbSubMenuPasswordInput.setText(pdtDBSettings.getProperty("password", ""));
                    dbSubMenuDatabaseInput.setText(pdtDBSettings.getProperty("database", ""));

                    // Escritura de parámetros vacíos de configuración para la aplicación
                    File pdtAppSettingsFile = new File("C:\\PDT\\pdt_app_settings.properties");
                    FileReader AppFileReader = new FileReader(pdtAppSettingsFile);
                    pdtDBSettings.load(AppFileReader);

                } catch (Exception e) {
                }
            } else {
                // Si existen los archivos de configuración, se cargan los parámetros de estos al programa.
                try {
                    // Escribe los parámetros de configuración para el servidor FTP
                    File pdtFTPSettingsFile = new File("C:\\PDT\\pdt_ftp_settings.properties");
                    FileReader FTPFileReader = new FileReader(pdtFTPSettingsFile);
                    pdtFTPSettings.load(FTPFileReader);
                    ftpSubMenuServerInput.setText(pdtFTPSettings.getProperty("server", "localhost"));
                    ftpSubMenuUserInput.setText(pdtFTPSettings.getProperty("user", ""));
                    ftpSubMenuPasswordInput.setText(pdtFTPSettings.getProperty("password", ""));
                    ftpSubMenuPortInput.setText(pdtFTPSettings.getProperty("port", "21"));
                    nomCarpetaMasda.setText(pdtFTPSettings.getProperty("masda_folder", "Articulos_MASDA"));
                    nomCarpetaStock.setText(pdtFTPSettings.getProperty("stock_folder", "Stock_STOCK"));
                    nomCarpetaOrdenes.setText(pdtFTPSettings.getProperty("orders_folder", "Salidas_OBDLV"));
                    nomCarpetaEnvios.setText(pdtFTPSettings.getProperty("shipping_folder", "ConfirmacionSalidas_OBDLV_CONF"));

                    // Escribe los parámetros de configuración para la base de datos
                    File pdtDBSettingsFile = new File("C:\\PDT\\pdt_db_settings.properties");
                    FileReader DBFileReader = new FileReader(pdtDBSettingsFile);
                    pdtDBSettings.load(DBFileReader);
                    dbSubMenuServerInput.setText(pdtDBSettings.getProperty("server", "localhost"));
                    dbSubMenuUsernameInput.setText(pdtDBSettings.getProperty("user", ""));
                    dbSubMenuPasswordInput.setText(pdtDBSettings.getProperty("password", ""));
                    dbSubMenuDatabaseInput.setText(pdtDBSettings.getProperty("database", ""));

                    // Escribe los parámetros de configuración para la aplicación
                    File pdtAppSettingsFile = new File("C:\\PDT\\pdt_app_settings.properties");
                    FileReader AppFileReader = new FileReader(pdtAppSettingsFile);
                    pdtAppSettings.load(AppFileReader);
                    stockSpinnerHR1.setValue(pdtAppSettings.getProperty("stock_interval_h1", "12 AM"));
                    stockSpinnerStockInterval.setValue(pdtAppSettings.getProperty("stock_interval_h2", "12 hrs"));
                    ordenesFreqSpinner.setValue(pdtAppSettings.getProperty("orders_timer", "30 min."));
                    enviosFreqSpinner.setValue(pdtAppSettings.getProperty("order_shipped_timer", "30 min."));
                    masdaSpinner.setValue(pdtAppSettings.getProperty("masda_timer", "5 AM"));
                } catch (Exception e) {
                }
            }
        }


    }//GEN-LAST:event_btnSettingsActionPerformed

    /* ftp download
     ftpObject = new FTPObject(pdtFTPSettings.getProperty("server"), pdtFTPSettings.getProperty("port"), pdtFTPSettings.getProperty("user"), pdtFTPSettings.getProperty("password"));
     int result = ftpObject.downloadFile();
     if(result == 0){
     System.out.println("El archivo se descargó con éxito!");
     }
     else{
     System.out.println("El archivo no se pudo descargar!");
     */

    private void ftpSubMenuSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftpSubMenuSaveBtnActionPerformed
        // Si se presiona el botón de "Guardar" en el menú de configuración FTP
        pdtFTPSettings.setProperty("server", ftpSubMenuServerInput.getText());
        pdtFTPSettings.setProperty("user", ftpSubMenuUserInput.getText());
        pdtFTPSettings.setProperty("password", new String(ftpSubMenuPasswordInput.getPassword()));
        pdtFTPSettings.setProperty("port", ftpSubMenuPortInput.getText());
        pdtFTPSettings.setProperty("masda_folder", nomCarpetaMasda.getText());
        pdtFTPSettings.setProperty("stock_folder", nomCarpetaStock.getText());
        pdtFTPSettings.setProperty("orders_folder", nomCarpetaOrdenes.getText());
        pdtFTPSettings.setProperty("shipping_folder", nomCarpetaEnvios.getText());

        File configFile = new File("C:\\PDT\\pdt_ftp_settings.properties");
        FileWriter writer;
        try {
            writer = new FileWriter(configFile);
            pdtFTPSettings.store(writer, "FTP Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Si se presiona el botón de "Guardar" en el menú de configuración de la base de datos
        pdtDBSettings.setProperty("server", dbSubMenuServerInput.getText());
        pdtDBSettings.setProperty("user", dbSubMenuUsernameInput.getText());
        pdtDBSettings.setProperty("password", new String(dbSubMenuPasswordInput.getPassword()));
        pdtDBSettings.setProperty("database", dbSubMenuDatabaseInput.getText());

        File configFile2 = new File("C:\\PDT\\pdt_db_settings.properties");
        FileWriter writer2;
        try {
            writer2 = new FileWriter(configFile2);
            pdtDBSettings.store(writer2, "DB Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        menuConfig.dispose();
    }//GEN-LAST:event_ftpSubMenuSaveBtnActionPerformed

    private void ftpSubMenuCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftpSubMenuCancelBtnActionPerformed
        // Si se presiona el botón de "Cancelar" en el menu de configuración del FTP
        menuConfig.dispose();
    }//GEN-LAST:event_ftpSubMenuCancelBtnActionPerformed

    private void dbSubMenuSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbSubMenuSaveBtnActionPerformed
        // Si se presiona el botón de "Guardar" en el menú de configuración de la base de datos
        pdtDBSettings.setProperty("server", dbSubMenuServerInput.getText());
        pdtDBSettings.setProperty("user", dbSubMenuUsernameInput.getText());
        pdtDBSettings.setProperty("password", new String(dbSubMenuPasswordInput.getPassword()));
        pdtDBSettings.setProperty("database", dbSubMenuDatabaseInput.getText());

        File configFile = new File("C:\\PDT\\pdt_db_settings.properties");
        FileWriter writer;
        try {
            writer = new FileWriter(configFile);
            pdtDBSettings.store(writer, "DB Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Si se presiona el botón de "Guardar" en el menú de configuración FTP
        pdtFTPSettings.setProperty("server", ftpSubMenuServerInput.getText());
        pdtFTPSettings.setProperty("user", ftpSubMenuUserInput.getText());
        pdtFTPSettings.setProperty("password", new String(ftpSubMenuPasswordInput.getPassword()));
        pdtFTPSettings.setProperty("port", ftpSubMenuPortInput.getText());
        pdtFTPSettings.setProperty("masda_folder", nomCarpetaMasda.getText());
        pdtFTPSettings.setProperty("stock_folder", nomCarpetaStock.getText());
        pdtFTPSettings.setProperty("orders_folder", nomCarpetaOrdenes.getText());
        pdtFTPSettings.setProperty("shipping_folder", nomCarpetaEnvios.getText());

        File configFile2 = new File("C:\\PDT\\pdt_ftp_settings.properties");
        FileWriter writer2;
        try {
            writer2 = new FileWriter(configFile2);
            pdtFTPSettings.store(writer2, "FTP Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        menuConfig.dispose();
    }//GEN-LAST:event_dbSubMenuSaveBtnActionPerformed

    private void dbSubMenuCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbSubMenuCancelBtnActionPerformed
        // Si se presiona el botón de "Cancelar" en el menu de configuración del FTP
        menuConfig.dispose();
    }//GEN-LAST:event_dbSubMenuCancelBtnActionPerformed

    // Este hilo es el que va a ejecutar la barra de progreso del inventario
    public static class StockThread implements Runnable {

        @Override
        public void run() {
            for (int i = 0; i <= 100; i++) { //Progressively increment variable i
                pbStock.setValue(i); //Set value
                pbStock.repaint(); //Refresh graphics
                try {
                    Thread.sleep((TimeUnit.MILLISECONDS.convert(12, TimeUnit.HOURS)) / 100);
                } //Sleep 200 milliseconds
                catch (InterruptedException err) {
                }
            }
        }
    }

    // Este hilo es el que va a ejecutar la barra de progreso de las órdenes
    public static class OrderThread implements Runnable {

        int time = (Integer.parseInt(pdtAppSettings.getProperty("orders_timer").replaceAll("[^0-9]", "")) * 60 * 1000) / 100;

        @Override
        public void run() {
            for (int i = 0; i <= 100; i++) { //Progressively increment variable i
                pbOrder.setValue(i); //Set value
                pbOrder.repaint(); //Refresh graphics
                try {
                    Thread.sleep(time);
                } //Sleep 200 milliseconds
                catch (InterruptedException err) {
                }
            }
        }
    }

    // Este hilo es el que va a ejecutar la barra de progreso de los envíos
    public static class ShippingThread implements Runnable {

        int time = (Integer.parseInt(pdtAppSettings.getProperty("order_shipped_timer").replaceAll("[^0-9]", "")) * 60 * 1000) / 100;

        @Override
        public void run() {
            for (int i = 0; i <= 100; i++) { //Progressively increment variable i
                pbShipping.setValue(i); //Set value
                pbShipping.repaint(); //Refresh graphics
                try {
                    Thread.sleep(time);
                } //Sleep 200 milliseconds
                catch (InterruptedException err) {
                }
            }
        }
    }

    // Este hilo es el que va a ejecutar la barra de progreso del masda
    public static class MasdaThread implements Runnable {

        @Override
        public void run() {
            for (int i = 0; i <= 100; i++) { //Progressively increment variable i
                pbMasda.setValue(i); //Set value
                pbMasda.repaint(); //Refresh graphics
                try {
                    Thread.sleep((TimeUnit.MILLISECONDS.convert(24, TimeUnit.HOURS)) / 100);
                } //Sleep 200 milliseconds
                catch (InterruptedException err) {
                }
            }
        }
    }

    private void appConfigBtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appConfigBtnGuardarActionPerformed
        // Si se presiona el botón de guardar en el menú de configuración de la aplicación
        pdtDBSettings.setProperty("server", dbSubMenuServerInput.getText());
        pdtDBSettings.setProperty("user", dbSubMenuUsernameInput.getText());
        pdtDBSettings.setProperty("password", new String(dbSubMenuPasswordInput.getPassword()));
        pdtDBSettings.setProperty("database", dbSubMenuDatabaseInput.getText());

        File configFile = new File("C:\\PDT\\pdt_db_settings.properties");
        FileWriter writer;
        try {
            writer = new FileWriter(configFile);
            pdtDBSettings.store(writer, "DB Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Si se presiona el botón de "Guardar" en el menú de configuración FTP
        pdtFTPSettings.setProperty("server", ftpSubMenuServerInput.getText());
        pdtFTPSettings.setProperty("user", ftpSubMenuUserInput.getText());
        pdtFTPSettings.setProperty("password", new String(ftpSubMenuPasswordInput.getPassword()));
        pdtFTPSettings.setProperty("port", ftpSubMenuPortInput.getText());

        File configFile2 = new File("C:\\PDT\\pdt_ftp_settings.properties");
        FileWriter writer2;
        try {
            writer2 = new FileWriter(configFile2);
            pdtFTPSettings.store(writer2, "FTP Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        pdtAppSettings.setProperty("stock_interval_h1", stockSpinnerHR1.getValue().toString());
        pdtAppSettings.setProperty("stock_interval_h2", stockSpinnerStockInterval.getValue().toString());
        pdtAppSettings.setProperty("orders_timer", ordenesFreqSpinner.getValue().toString());
        pdtAppSettings.setProperty("order_shipped_timer", enviosFreqSpinner.getValue().toString());
        pdtAppSettings.setProperty("masda_timer", masdaSpinner.getValue().toString());

        File configFile3 = new File("C:\\PDT\\pdt_app_settings.properties");
        FileWriter writer3;
        try {
            writer3 = new FileWriter(configFile3);
            pdtAppSettings.store(writer3, "App Settings");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        menuConfig.dispose();
    }//GEN-LAST:event_appConfigBtnGuardarActionPerformed

    private void appConfigBtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appConfigBtnCancelarActionPerformed
        // Si se presiona el botón de cancelar en el menú de configuración de la aplicación
        menuConfig.dispose();
    }//GEN-LAST:event_appConfigBtnCancelarActionPerformed

    public static int getNextExecutionTime(int targetHour) {
        int delayHr = 0;
        Calendar calendar = Calendar.getInstance();
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        int min = calendar.get(Calendar.MINUTE);
        delayHr = hour < targetHour ? targetHour - hour : targetHour - hour + 24;

        System.out.println("Hora actual: " + hour + ":" + min);
        System.out.println("Siguiente ejecución en: " + delayHr + " hrs.");

        return delayHr;
    }

    private void btnStocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStocksActionPerformed
        // Cuando se presiona el botón de inventario
        if (btnStocks.isSelected()) {
            btnStocks.setIcon(new ImageIcon(this.getClass().getResource("/images/stock_icon_on.png")));
            logScreen.append("\nInicializando la verificación del inventario...");
            new Thread(new StockThread()).start();

            //Inicializa la tarea
            schedulerStock = Executors.newScheduledThreadPool(1);
            schedulerStock.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    // Tarea para verificar el stock
                    new Thread(new StockThread()).start();
                    loadingIcon.setVisible(true);

                    // Crea el objeto FTP
                    FTPObject ftpObject = new FTPObject(pdtFTPSettings.getProperty("server"), pdtFTPSettings.getProperty("port"), pdtFTPSettings.getProperty("user"), pdtFTPSettings.getProperty("password"));
                    System.out.println("Actualizando Stock Diario...");
                    logScreen.append("\n");
                    logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Actualizando el inventario...");
                    Validacion validacion = new Validacion();
        //validacion.validaNombreArchivoStockDiario("STOCK_PDT_20150727_131700_041.xml");
                    // Primero checa si existe un archivo XML con el nombre especificado
                    ArrayList archivoStockDiario = ftpObject.getStockDiarioFile();
                    if ((int) archivoStockDiario.get(0) == 0) {
                        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se descargó exitosamente!");
                        int exitCode = ftpObject.deleteFile(pdtFTPSettings.getProperty("stock_folder"), archivoStockDiario.get(1).toString());
                        if (exitCode == 0) {
                            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se borró exitosamente!");
                        }
                        ProcesadorDeStock ps = new ProcesadorDeStock();
                        try {
                            ps.actualizarDBPrestaShop("C:\\PDT\\tmp\\" + archivoStockDiario.get(1));
                            if (!(new File("C:\\PDT\\procesados\\" + archivoStockDiario.get(1)).exists())) {
                                FileUtils.moveFileToDirectory(new File("C:\\PDT\\tmp\\" + archivoStockDiario.get(1)), new File("C:\\PDT\\procesados\\"), true);
                            } else {
                                FileUtils.deleteQuietly(new File("C:\\PDT\\procesados\\" + archivoStockDiario.get(1)));
                                FileUtils.moveFileToDirectory(new File("C:\\PDT\\tmp\\" + archivoStockDiario.get(1)), new File("C:\\PDT\\procesados\\"), true);
                            }
                        } catch (ParserConfigurationException | SAXException | IOException ex) {
                            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                            logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
                        } catch (Exception ex) {
                            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                            logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
                        }
                    } else {
                        System.out.println("El archivo no fue encontrado.");
                        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo no fue encontrado.");
                    }
                    logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Terminando actualización del inventario...");
                    ftpObject.dc();
                }
            }, getNextExecutionTime(Integer.parseInt(pdtAppSettings.getProperty("stock_interval_h1").replaceAll("[^0-9]", ""))), 12, TimeUnit.HOURS);

            /* Inicializa la tarea para estar checando si hay un archivo de stock para actualizar
             ActionListener actionListenerStockDiario = new ActionListener() {       
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
             new Thread(new StockThread()).start();
             loadingIcon.setVisible(true);
                        
             // Crea el objeto FTP
             FTPObject ftpObject = new FTPObject(pdtFTPSettings.getProperty("server"), pdtFTPSettings.getProperty("port"), pdtFTPSettings.getProperty("user"), pdtFTPSettings.getProperty("password"));
             System.out.println( "Actualizando Stock Diario..." );
             logScreen.append("\n");
             logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Actualizando el inventario...");
             Validacion validacion = new Validacion();
             //validacion.validaNombreArchivoStockDiario("STOCK_PDT_20150727_131700_041.xml");
             // Primero checa si existe un archivo XML con el nombre especificado
             ArrayList archivoStockDiario = ftpObject.getStockDiarioFile();
             if((int)archivoStockDiario.get(0) == 0){
             logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se descargó exitosamente!");
             int exitCode = ftpObject.deleteFile(archivoStockDiario.get(1).toString());
             if(exitCode == 0){
             logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se borró exitosamente!");
             }
             ProcesadorDeStock ps = new ProcesadorDeStock();
             try {
             ps.actualizarDBPrestaShop("C:\\PDT\\tmp\\" + archivoStockDiario.get(1));
             } catch (ParserConfigurationException | SAXException | IOException ex) {
             Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
             } catch (Exception ex) {
             Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
             }
             }else{
             System.out.println("El archivo no fue encontrado.");
             logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo no fue encontrado.");
             }
             logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Terminando actualización del inventario...");
             loadingIcon.setVisible(false);
             ftpObject.dc();
             }
             };
             timerStockDiario = new Timer( 60000, actionListenerStockDiario );
             timerStockDiario.start();
             */
        } else {
            btnStocks.setIcon(new ImageIcon(this.getClass().getResource("/images/stock_icon_off.png")));
            logScreen.append("\nDeteniendo la verificación de órdenes...");
            //timerStockDiario.stop();
            schedulerStock.shutdown();
        }
    }//GEN-LAST:event_btnStocksActionPerformed

    private void btnOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdersActionPerformed
        // Cuando se presiona el botón de órdenes
        if (btnOrders.isSelected()) {
            btnOrders.setIcon(new ImageIcon(this.getClass().getResource("/images/order_icon_on.png")));
            logScreen.append("\nInicializando la verificación de órdenes...");
            new Thread(new OrderThread()).start();
            // Inicializa la tarea para estar checando si hay órdenes
            ActionListener actionListenerOrdenes = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    new Thread(new OrderThread()).start();
                    SwingWorker<Void, String> po = new ProcesadorDeOrdenes();
                    loadingIcon.setVisible(true);
                    po.execute();
                }
            };
            timerOrdenes = new Timer(Integer.parseInt(pdtAppSettings.getProperty("orders_timer").replaceAll("[^0-9]", "")) * 60 * 1000, actionListenerOrdenes);
            //timerOrdenes = new Timer( 10000, actionListenerMasda );
            timerOrdenes.start();
        } else {
            btnOrders.setIcon(new ImageIcon(this.getClass().getResource("/images/order_icon_off.png")));
            logScreen.append("\nDeteniendo la verificación de órdenes...");
            timerOrdenes.stop();
        }
    }//GEN-LAST:event_btnOrdersActionPerformed

    private void btnShippingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShippingActionPerformed
        // Cuando se presiona el botón de envíos
        if (btnShipping.isSelected()) {
            btnShipping.setIcon(new ImageIcon(this.getClass().getResource("/images/shipping_icon_on.png")));
            logScreen.append("\nInicializando la verificación de envíos...");
            new Thread(new ShippingThread()).start();
            // Inicializa la tarea para estar checando los envíos
            ActionListener actionListenerEnvios = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    new Thread(new ShippingThread()).start();
                    logScreen.append("\n");
                    logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Buscando archivo de envíos en el servidor FTP...");

                    // Crea un objeto FTP
                    FTPObject ftpObject = new FTPObject(pdtFTPSettings.getProperty("server"), pdtFTPSettings.getProperty("port"), pdtFTPSettings.getProperty("user"), pdtFTPSettings.getProperty("password"));

                    // Primero checa si existe un archivo XML con el nombre especificado
                    ArrayList<FTPFile> archivoOrdenesEnvios = ftpObject.getEnviosFile();
                    if (!archivoOrdenesEnvios.isEmpty()) {
                        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Los archivos se descargaron exitosamente!");

                        for (FTPFile f : archivoOrdenesEnvios) {
                            int exitCode = ftpObject.deleteFile(pdtFTPSettings.getProperty("shipping_folder"), f.getName());
                            if (exitCode == 0) {
                                logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se borró exitosamente!");
                            }
                        }

                        PorcesadorDeEnvios pe = new PorcesadorDeEnvios();
                        try {
                            pe.procesarOrdenesDeEnvio(archivoOrdenesEnvios);
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " " + ex.getMessage());
                        } catch (IOException ex) {
                            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " " + ex.getMessage());
                        } catch (Exception ex) {
                            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " " + ex.getMessage());
                        }
                    } else {
                        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " No se encontró ningún archivo.");
                    }
                    logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Terminando la búsqueda de envíos...");
                    ftpObject.dc();
                }
            };
            timerEnvios = new Timer(Integer.parseInt(pdtAppSettings.getProperty("order_shipped_timer").replaceAll("[^0-9]", "")) * 60 * 1000, actionListenerEnvios);
            timerEnvios.start();
        } else {
            btnShipping.setIcon(new ImageIcon(this.getClass().getResource("/images/shipping_icon_off.png")));
            logScreen.append("\nDeteniendo la verificación de órdenes...");
            timerEnvios.stop();
        }
    }//GEN-LAST:event_btnShippingActionPerformed

    private void btnMasdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMasdaActionPerformed
        if (btnMasda.isSelected()) {
            btnMasda.setIcon(new ImageIcon(this.getClass().getResource("/images/masda_icon_on.png")));
            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Inicializando la generación del Maestro de Artículos...");
            new Thread(new MasdaThread()).start();

            // Inicia tarea para generar masda
            schedulerMasda = Executors.newScheduledThreadPool(1);
            schedulerMasda.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    try {
                        new Thread(new MasdaThread()).start();
                        SwingWorker<Void, String> pm = new ProcesadorDeMasda();
                        loadingIcon.setVisible(true);
                        pm.execute();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }, getNextExecutionTime(Integer.parseInt(pdtAppSettings.getProperty("masda_timer").replaceAll("[^0-9]", ""))), 24, TimeUnit.HOURS);

            /* Inicializa la tarea para checar si hay productos nuevos
             ActionListener actionListenerMasda = new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
             try {
             new Thread(new MasdaThread()).start();
             SwingWorker<Void, String> pm = new ProcesadorDeMasda();
             loadingIcon.setVisible(true);
             pm.execute();
             } catch (FileNotFoundException ex) {
             Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
             }
             }
             };
             timerMasda = new Timer(900000, actionListenerMasda);
             timerMasda.start();
             */
        } else {
            btnMasda.setIcon(new ImageIcon(this.getClass().getResource("/images/masda_icon_off.png")));
            logScreen.append("\nDeteniendo la generación del Maestro de Artículos...");
            //timerMasda.stop();
            schedulerMasda.shutdown();
        }
    }//GEN-LAST:event_btnMasdaActionPerformed

    private void stockTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockTestBtnActionPerformed
        // si se presiona el boton de prueba de stock
        // Crea el objeto FTP
        FTPObject ftpObject = new FTPObject(pdtFTPSettings.getProperty("server"), pdtFTPSettings.getProperty("port"), pdtFTPSettings.getProperty("user"), pdtFTPSettings.getProperty("password"));
        System.out.println("Actualizando Stock Diario...");
        logScreen.append("\n");
        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Actualizando el inventario...");
        Validacion validacion = new Validacion();
        //validacion.validaNombreArchivoStockDiario("STOCK_PDT_20150727_131700_041.xml");
        // Primero checa si existe un archivo XML con el nombre especificado
        ArrayList archivoStockDiario = ftpObject.getStockDiarioFile();
        if ((int) archivoStockDiario.get(0) == 0) {
            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se descargó exitosamente!");
            int exitCode = ftpObject.deleteFile(pdtFTPSettings.getProperty("stock_folder"), archivoStockDiario.get(1).toString());
            if (exitCode == 0) {
                logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se borró exitosamente!");
            }
            ProcesadorDeStock ps = new ProcesadorDeStock();
            try {
                ps.actualizarDBPrestaShop("C:\\PDT\\tmp\\" + archivoStockDiario.get(1));
                if (!(new File("C:\\PDT\\procesados\\" + archivoStockDiario.get(1)).exists())) {
                    FileUtils.moveFileToDirectory(new File("C:\\PDT\\tmp\\" + archivoStockDiario.get(1)), new File("C:\\PDT\\procesados\\"), true);
                } else {
                    FileUtils.deleteQuietly(new File("C:\\PDT\\procesados\\" + archivoStockDiario.get(1)));
                    FileUtils.moveFileToDirectory(new File("C:\\PDT\\tmp\\" + archivoStockDiario.get(1)), new File("C:\\PDT\\procesados\\"), true);
                }
            } catch (ParserConfigurationException | SAXException | IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
            }
        } else {
            System.out.println("El archivo no fue encontrado.");
            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo no fue encontrado.");
        }
        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Terminando actualización del inventario...");
        ftpObject.dc();
    }//GEN-LAST:event_stockTestBtnActionPerformed

    private void masdaTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masdaTestBtnActionPerformed
        // si presiona el boton de prueba de masda
        try {
            new Thread(new MasdaThread()).start();
            SwingWorker<Void, String> pm = new ProcesadorDeMasda();
            loadingIcon.setVisible(true);
            pm.execute();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_masdaTestBtnActionPerformed

    private void orderTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderTestButtonActionPerformed
        // Si se presiona el boton de prueba para ordenes
        SwingWorker<Void, String> po = new ProcesadorDeOrdenes();
        loadingIcon.setVisible(true);
        po.execute();
    }//GEN-LAST:event_orderTestButtonActionPerformed

    private void shippingTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shippingTestBtnActionPerformed
        // si se presiona el boton de prueba de envíos
        logScreen.append("\n");
        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Buscando archivo de envíos en el servidor FTP...");

        // Crea un objeto FTP
        FTPObject ftpObject = new FTPObject(pdtFTPSettings.getProperty("server"), pdtFTPSettings.getProperty("port"), pdtFTPSettings.getProperty("user"), pdtFTPSettings.getProperty("password"));

        // Primero checa si existe un archivo XML con el nombre especificado
        ArrayList<FTPFile> archivoOrdenesEnvios = ftpObject.getEnviosFile();
        if (!archivoOrdenesEnvios.isEmpty()) {
            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Los archivos se descargaron exitosamente!");

            for (FTPFile f : archivoOrdenesEnvios) {
                int exitCode = ftpObject.deleteFile(pdtFTPSettings.getProperty("shipping_folder"), f.getName());
                if (exitCode == 0) {
                    logScreen.append("\n" + new Timestamp(new Date().getTime()) + " El archivo se borró exitosamente!");
                }
            }

            PorcesadorDeEnvios pe = new PorcesadorDeEnvios();
            try {
                pe.procesarOrdenesDeEnvio(archivoOrdenesEnvios);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                logScreen.append("\n" + new Timestamp(new Date().getTime()) + ex.getMessage());
            }
        } else {
            logScreen.append("\n" + new Timestamp(new Date().getTime()) + " No se encontró ningún archivo.");
        }
        logScreen.append("\n" + new Timestamp(new Date().getTime()) + " Terminando la búsqueda de envíos...");
        ftpObject.dc();
    }//GEN-LAST:event_shippingTestBtnActionPerformed

    // En caso de que el usuario quiera cerrar la aplicación
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     *
     */
    public static void main(String args[]) throws IOException {

        /* Single instance lock via serversockets
         try{
         ServerSocket socket = new ServerSocket(9999, 10, InetAddress.getByAddress(new byte[] {127, 0, 0, 1}));

         }catch(java.net.BindException b){
         JOptionPane.showMessageDialog(null,"Ya existe una intancia de esta aplicación!","ERROR",3);
         }catch(Exception e){
         System.out.println(e.toString());
         }*/
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainGUI ventana = new MainGUI();
                ventana.setVisible(true);
                DefaultCaret caret = (DefaultCaret) logScreen.getCaret();
                caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                
                // Inicia todos los procesos al momento de ejecutar el programa
                ventana.btnStocks.doClick();
                ventana.btnStocks.setSelected(true);
                ventana.btnMasda.doClick();
                ventana.btnMasda.setSelected(true);
                ventana.btnOrders.doClick();
                ventana.btnOrders.setSelected(true);
                ventana.btnShipping.doClick();
                ventana.btnShipping.setSelected(true);
            }
        });

        if (!(new File("C:\\PDT").exists())) {
            new File("C:\\PDT").mkdir();
        }
        if (!(new File("C:\\PDT\\tmp").exists())) {
            new File("C:\\PDT\\tmp").mkdir();
        }
        if (!(new File("C:\\PDT\\procesados").exists())) {
            new File("C:\\PDT\\procesados").mkdir();
        }
        if ((!(new File("C:\\PDT\\pdt_app_settings.properties").exists()))) {
            ClassLoader classloader = Thread.currentThread().getContextClassLoader();
            InputStream iStreamApp = classloader.getResourceAsStream("files/pdt_app_settings.properties"); // archivo de configuración de la aplicación
            OutputStream outputStreamApp = new FileOutputStream(new File("C:\\PDT\\pdt_app_settings.properties")); // stream de escritura para archivo config de la aplicación
            int read = 0;
            byte[] bytes = new byte[1024];

            while (((read = iStreamApp.read(bytes)) != -1)) {
                outputStreamApp.write(bytes, 0, read);
            }
            iStreamApp.close();
            outputStreamApp.close();
            // Escritura de parámetros vacíos de configuración para la aplicación
            File pdtAppSettingsFile = new File("C:\\PDT\\pdt_app_settings.properties");
            FileReader AppFileReader = new FileReader(pdtAppSettingsFile);
            pdtDBSettings.load(AppFileReader);
        }
        // Es necesario cargar las preferencias al inicio para que todas las conexiones necesarias funcionen (DB y FTP).
        File pdtDBSettingsFile = new File("C:\\PDT\\pdt_db_settings.properties");
        FileReader DBFileReader = new FileReader(pdtDBSettingsFile);
        pdtDBSettings.load(DBFileReader);

        File pdtFTPSettingsFile = new File("C:\\PDT\\pdt_ftp_settings.properties");
        FileReader FTPFileReader = new FileReader(pdtFTPSettingsFile);
        pdtFTPSettings.load(FTPFileReader);

        File pdtAppSettingsFile = new File("C:\\PDT\\pdt_app_settings.properties");
        FileReader AppFileReader = new FileReader(pdtAppSettingsFile);
        pdtAppSettings.load(AppFileReader);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appConfigBtnCancelar;
    private javax.swing.JButton appConfigBtnGuardar;
    private javax.swing.JSeparator appConfigSeparator;
    private javax.swing.JLabel appConfigTimerEnviosLabel;
    private javax.swing.JLabel appConfigTimerOrdenesLabel;
    private javax.swing.JLabel appConfigTimerStockDiarioLabel;
    private javax.swing.JLabel appConfigTitle;
    private javax.swing.JPanel bgPanel;
    private javax.swing.JToggleButton btnMasda;
    private javax.swing.JToggleButton btnOrders;
    private javax.swing.JButton btnSettings;
    private javax.swing.JToggleButton btnShipping;
    private javax.swing.JToggleButton btnStocks;
    private javax.swing.JLabel dbConfigTitle;
    private javax.swing.JButton dbSubMenuCancelBtn;
    private javax.swing.JTextField dbSubMenuDatabaseInput;
    private javax.swing.JLabel dbSubMenuDatabaseLabel;
    private javax.swing.JPasswordField dbSubMenuPasswordInput;
    private javax.swing.JLabel dbSubMenuPasswordLabel;
    private javax.swing.JButton dbSubMenuSaveBtn;
    private javax.swing.JSeparator dbSubMenuSeparator;
    private javax.swing.JTextField dbSubMenuServerInput;
    private javax.swing.JLabel dbSubMenuServerLabel;
    private javax.swing.JLabel dbSubMenuUserLabel;
    private javax.swing.JTextField dbSubMenuUsernameInput;
    private javax.swing.JSpinner enviosFreqSpinner;
    private javax.swing.JLabel ftpConfigTitle;
    private javax.swing.JButton ftpSubMenuCancelBtn;
    private javax.swing.JLabel ftpSubMenuPassLabel;
    private javax.swing.JPasswordField ftpSubMenuPasswordInput;
    private javax.swing.JTextField ftpSubMenuPortInput;
    private javax.swing.JLabel ftpSubMenuPortLabel;
    private javax.swing.JButton ftpSubMenuSaveBtn;
    private javax.swing.JSeparator ftpSubMenuSeparator;
    private javax.swing.JTextField ftpSubMenuServerInput;
    private javax.swing.JLabel ftpSubMenuServerLabel;
    private javax.swing.JTextField ftpSubMenuUserInput;
    private javax.swing.JLabel ftpSubMenuUserLabel;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JLabel loadingIcon;
    public static javax.swing.JTextArea logScreen;
    private javax.swing.JLabel masdaLoadingIcon;
    private javax.swing.JSpinner masdaSpinner;
    private javax.swing.JButton masdaTestBtn;
    private javax.swing.JLabel masdaTimerConfigLabel;
    private javax.swing.JDialog menuConfig;
    private javax.swing.JTextField nomCarpetaEnvios;
    private javax.swing.JLabel nomCarpetaEnviosLabel;
    private javax.swing.JTextField nomCarpetaMasda;
    private javax.swing.JLabel nomCarpetaMasdaLabel;
    private javax.swing.JTextField nomCarpetaOrdenes;
    private javax.swing.JLabel nomCarpetaOrdersLabel;
    private javax.swing.JTextField nomCarpetaStock;
    private javax.swing.JLabel nomCarpetaStockLabel;
    private javax.swing.JSpinner ordenesFreqSpinner;
    private javax.swing.JLabel orderLoadingIcon;
    private javax.swing.JButton orderTestButton;
    private javax.swing.JTabbedPane panelMenuConfig;
    private static javax.swing.JProgressBar pbMasda;
    private static javax.swing.JProgressBar pbOrder;
    private static javax.swing.JProgressBar pbShipping;
    private static javax.swing.JProgressBar pbStock;
    private javax.swing.JLabel shippingLoadingIcon;
    private javax.swing.JButton shippingTestBtn;
    private javax.swing.JLabel stockHR1Label;
    private javax.swing.JLabel stockIntervalLabel;
    private javax.swing.JLabel stockLoadingIcon;
    private javax.swing.JSpinner stockSpinnerHR1;
    private javax.swing.JSpinner stockSpinnerStockInterval;
    private javax.swing.JButton stockTestBtn;
    private javax.swing.JPanel subMenuConfigApp;
    private javax.swing.JPanel subMenuConfigDB;
    private javax.swing.JPanel subMenuConfigFTP;
    // End of variables declaration//GEN-END:variables
    public static Properties pdtFTPSettings = new Properties();
    public static Properties pdtDBSettings = new Properties();
    public static Properties pdtAppSettings = new Properties();
    private static Timer timerStockDiario, timerEnvios, timerOrdenes, timerMasda;
    private static ScheduledExecutorService schedulerMasda, schedulerStock;
    //private static ActionListener actionListenerStockDiario;
    //private static FTPObject ftpObject;
}
